diff -urN python-jsonrpc-r19/jsonrpc/cgiwrapper.py python-jsonrpc-r19.modified//jsonrpc/cgiwrapper.py
--- python-jsonrpc-r19/jsonrpc/cgiwrapper.py	2007-04-23 12:40:50.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/cgiwrapper.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,45 +0,0 @@
-import sys, os
-from jsonrpc import ServiceHandler
-
-class CGIServiceHandler(ServiceHandler):
-    def __init__(self, service):
-        if service == None:
-            import __main__ as service
-
-        ServiceHandler.__init__(self, service)
-
-    def handleRequest(self, fin=None, fout=None, env=None):
-        if fin==None:
-            fin = sys.stdin
-        if fout==None:
-            fout = sys.stdout
-        if env == None:
-            env = os.environ
-        
-        try:
-            contLen=int(env['CONTENT_LENGTH'])
-            data = fin.read(contLen)
-        except Exception, e:
-            data = ""
-
-        resultData = ServiceHandler.handleRequest(self, data)
-        
-        response = "Content-Type: text/plain\n"
-        response += "Content-Length: %d\n\n" % len(resultData)
-        response += resultData
-        
-        #on windows all \n are converted to \r\n if stdout is a terminal and  is not set to binary mode :(
-        #this will then cause an incorrect Content-length.
-        #I have only experienced this problem with apache on Win so far.
-        if sys.platform == "win32":
-            try:
-                import  msvcrt
-                msvcrt.setmode(fout.fileno(), os.O_BINARY)
-            except:
-                pass
-        #put out the response
-        fout.write(response)
-        fout.flush()
-
-def handleCGI(service=None, fin=None, fout=None, env=None):
-    CGIServiceHandler(service).handleRequest(fin, fout, env)
\ No newline at end of file
diff -urN python-jsonrpc-r19/jsonrpc/__init__.py python-jsonrpc-r19.modified//jsonrpc/__init__.py
--- python-jsonrpc-r19/jsonrpc/__init__.py	2007-04-29 08:08:53.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/__init__.py	2014-05-08 12:15:08.000000000 -0700
@@ -21,6 +21,3 @@
 
 from jsonrpc.json import loads, dumps, JSONEncodeException, JSONDecodeException
 from jsonrpc.proxy import ServiceProxy, JSONRPCException
-from jsonrpc.serviceHandler import ServiceMethod, ServiceHandler, ServiceMethodNotFound, ServiceException
-from jsonrpc.cgiwrapper import handleCGI
-from jsonrpc.modpywrapper import handler
\ No newline at end of file
diff -urN python-jsonrpc-r19/jsonrpc/json.py python-jsonrpc-r19.modified//jsonrpc/json.py
--- python-jsonrpc-r19/jsonrpc/json.py	2007-07-25 12:24:19.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/json.py	2014-05-08 12:15:08.000000000 -0700
@@ -135,7 +135,7 @@
                 c = chars.next()
             currCharIsNext=False
             if c=='"':
-                value = ''
+                value = u''
                 try:
                     c=chars.next()
                     while c != '"':
@@ -150,7 +150,7 @@
                                 else:
                                     raise JSONDecodeException("Bad Escape Sequence Found")
                         else:
-                            value+=c
+                            value += unichr( ord( c ))
                         c=chars.next()
                 except StopIteration:
                     raise JSONDecodeException("Expected end of String")
diff -urN python-jsonrpc-r19/jsonrpc/modpywrapper.py python-jsonrpc-r19.modified//jsonrpc/modpywrapper.py
--- python-jsonrpc-r19/jsonrpc/modpywrapper.py	2007-04-29 08:08:53.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/modpywrapper.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,52 +0,0 @@
-import sys, os
-from jsonrpc import ServiceHandler, ServiceException
-
-
-class ServiceImplementaionNotFound(ServiceException):
-    pass
-
-
-class ModPyServiceHandler(ServiceHandler):
-    def __init__(self, req):
-        self.req = req
-        ServiceHandler.__init__(self, None)
-
-
-    def findServiceEndpoint(self, name):
-        req = self.req
-
-        (modulePath, fileName) = os.path.split(req.filename)
-        (moduleName, ext) = os.path.splitext(fileName)
-        
-        if not os.path.exists(os.path.join(modulePath, moduleName + ".py")):
-            raise ServiceImplementaionNotFound()
-        else:
-            if not modulePath in sys.path:
-                sys.path.insert(0, modulePath)
-
-            from mod_python import apache
-            module = apache.import_module(moduleName, log=1)
-            
-            if hasattr(module, "service"):
-                self.service = module.service
-            elif hasattr(module, "Service"):
-                self.service = module.Service()
-            else:
-                self.service = module
-
-        return ServiceHandler.findServiceEndpoint(self, name)
-            
-    
-    def handleRequest(self, data):
-        self.req.content_type = "text/plain"
-        data = self.req.read()
-        resultData = ServiceHandler.handleRequest(self, data)
-        self.req.write(resultData)
-        self.req.flush()
-
-def handler(req):
-    from mod_python import apache
-    ModPyServiceHandler(req).handleRequest(req)
-    return apache.OK
-    
-
diff -urN python-jsonrpc-r19/jsonrpc/proxy.py python-jsonrpc-r19.modified//jsonrpc/proxy.py
--- python-jsonrpc-r19/jsonrpc/proxy.py	2007-06-03 15:08:20.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/proxy.py	2014-05-08 12:31:28.000000000 -0700
@@ -19,31 +19,112 @@
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 """
 
-import urllib
+import urllib2
+import types
+
 from jsonrpc.json import dumps, loads
 
 class JSONRPCException(Exception):
     def __init__(self, rpcError):
         Exception.__init__(self)
         self.error = rpcError
+
+"""
+Extend or redefine this class if you want to use a different mechanism
+to make the request.  EG. In python 2.4, urllib2 for instance doesn't
+support persistent connections, could use pycurl instead.
+"""
+class RequestHandler(object):
+    def __init__(self):
+        self.__opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
+
+    def make_request(self, url, postdata):
+        request = urllib2.Request( url, postdata, headers = { "Content-type" : "text/plain" } )
+        return self.__opener.open( request ).read()
         
 class ServiceProxy(object):
-    def __init__(self, serviceURL, serviceName=None):
+    __request_id = 1
+
+    def __init__(self, serviceURL, serviceName=None, handler=None, nonce=None):
         self.__serviceURL = serviceURL
         self.__serviceName = serviceName
+        self.__handler = handler
+        self.nonce = nonce
+        if self.__handler == None:
+            self.__handler = RequestHandler()
+        if self.nonce == None:
+            self.getNonce()
 
     def __getattr__(self, name):
         if self.__serviceName != None:
             name = "%s.%s" % (self.__serviceName, name)
-        return ServiceProxy(self.__serviceURL, name)
+        return ServiceProxy(self.__serviceURL, name, self.__handler, self.nonce)
+
+    def getNonce(self):
+        ServiceProxy.__request_id += 1
+        postdata = dumps({"method": "system.getNonce", 'params': [], 'id': ServiceProxy.__request_id })
+        respdata = self.__handler.make_request( self.__serviceURL, postdata )
+        resp = loads(respdata)
+        if resp.has_key( 'error' ) and resp['error'] != None:
+            print "A little error: ", resp['error']
+            raise JSONRPCException(resp['error'])
+        self.nonce = resp['result']
 
     def __call__(self, *args):
-         postdata = dumps({"method": self.__serviceName, 'params': args, 'id':'jsonrpc'})
-         respdata = urllib.urlopen(self.__serviceURL, postdata).read()
-         resp = loads(respdata)
-         if resp['error'] != None:
-             raise JSONRPCException(resp['error'])
-         else:
-             return resp['result']
-         
+        ServiceProxy.__request_id += 1
+        postdata = dumps({"method": self.__serviceName, 'params': args, 'nonce': self.nonce, 'id': ServiceProxy.__request_id })
+        respdata = self.__handler.make_request( self.__serviceURL, postdata )
+        resp = loads(respdata)
+        if resp.has_key( 'error' ) and resp['error'] != None:
+            print "A little error: ", resp['error']
+            raise JSONRPCException(resp['error'])
+        self.__fix_callable_refs( resp )
+        result = resp['result']
+
+        if resp.has_key( 'fixups' ) and type( resp['fixups'] ) is types.ListType:
+            self.__handle_fixups__( result, resp['fixups'] )
+        
+        return result
+
+    def __fix_callable_refs( self, json_obj ):
+        if json_obj == None:
+            return
+        if type( json_obj ) is types.ListType:
+            for index,v in enumerate(json_obj):
+                if ( type( v ) is types.DictType ) and v.has_key( 'JSONRPCType' ) and ( v['JSONRPCType'] == "CallableReference" ) and v.has_key( 'objectID' ):
+                    json_obj[index] = ServiceProxy(self.__serviceURL, ".obj#%s" % v['objectID'], self.__handler, self.nonce)
+                else:
+                    self.__fix_callable_refs( v )
+        if type( json_obj ) is types.DictType:
+            for k, v in json_obj.items():
+                if ( type( v ) is types.DictType ) and v.has_key( 'JSONRPCType' ) and ( v['JSONRPCType'] == "CallableReference" ) and v.has_key( 'objectID' ):
+                    json_obj[k] = ServiceProxy(self.__serviceURL, ".obj#%s" % v['objectID'], self.__handler, self.nonce)
+                else:
+                    self.__fix_callable_refs( v )
+
+    def __handle_fixups__( self, result, fixups ):
+        ## Iterate all of the fixups, 
+        for fixup in fixups:
+            ## Each fixup is of the form (path_destination, path_source)
+            ## Just iterate through and copy source to destination.
+            destination = fixup[0]
+            source = fixup[1]
+            
+            original = self.__find_object__( result, source )
+            if original == None: continue
+
+            copy = self.__find_object__( result, destination[0:len(destination) -1] )
+            if copy == None: continue
+
+            copy[destination[-1]] = original
+
+    def __find_object__( self, base, path ):
+        for key in path:
+            base = base[key]
+
+        return base
+
+        
+
 
+ 
diff -urN python-jsonrpc-r19/jsonrpc/serviceHandler.py python-jsonrpc-r19.modified//jsonrpc/serviceHandler.py
--- python-jsonrpc-r19/jsonrpc/serviceHandler.py	2007-04-22 11:50:20.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/serviceHandler.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,113 +0,0 @@
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-
-from jsonrpc import loads, dumps, JSONEncodeException
-
-
-def ServiceMethod(fn):
-    fn.IsServiceMethod = True
-    return fn
-
-class ServiceException(Exception):
-    pass
-
-class ServiceRequestNotTranslatable(ServiceException):
-    pass
-
-class BadServiceRequest(ServiceException):
-    pass
-
-class ServiceMethodNotFound(ServiceException):
-    def __init__(self, name):
-        self.methodName=name
-
-class ServiceHandler(object):
-
-    def __init__(self, service):
-        self.service=service
-    
-    def handleRequest(self, json):
-        err=None
-        result = None
-        id_=''
-        
-        try:
-            req = self.translateRequest(json)
-        except ServiceRequestNotTranslatable, e:
-            err = e
-            req={'id':id_}
-
-        if err==None:
-            try:
-                id_ = req['id']
-                methName = req['method']
-                args = req['params']
-            except:
-                err = BadServiceRequest(json)
-                
-        if err == None:
-            try:
-                meth = self.findServiceEndpoint(methName)
-            except Exception, e:
-                err = e
-
-        if err == None:
-            try:
-                result = self.invokeServiceEndpoint(meth, args)
-            except Exception, e:
-                err = e
-
-        resultdata = self.translateResult(result, err, id_)
-
-        return resultdata
-
-    def translateRequest(self, data):
-        try:
-            req = loads(data)
-        except:
-            raise ServiceRequestNotTranslatable(data)
-        return req
-     
-    def findServiceEndpoint(self, name):
-        try:
-            meth = getattr(self.service, name)
-            if getattr(meth, "IsServiceMethod"):
-                return meth
-            else:
-                raise ServiceMethodNotFound(name)
-        except AttributeError:
-            raise ServiceMethodNotFound(name)
-
-    def invokeServiceEndpoint(self, meth, args):
-        return meth(*args)
-
-    def translateResult(self, rslt, err, id_):
-        if err != None:
-            err = {"name": err.__class__.__name__, "message":err.message}
-            rslt = None
-
-        try:
-            data = dumps({"result":rslt,"id":id_,"error":err})
-        except JSONEncodeException, e:
-            err = {"name": "JSONEncodeException", "message":"Result Object Not Serializable"}
-            data = dumps({"result":None, "id":id_,"error":err})
-            
-        return data
\ No newline at end of file
diff -urN python-jsonrpc-r19/jsonrpc/_tests/__init__.py python-jsonrpc-r19.modified//jsonrpc/_tests/__init__.py
--- python-jsonrpc-r19/jsonrpc/_tests/__init__.py	2007-04-22 11:50:20.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/_tests/__init__.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,20 +0,0 @@
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
diff -urN python-jsonrpc-r19/jsonrpc/_tests/test_cgiwrapper.py python-jsonrpc-r19.modified//jsonrpc/_tests/test_cgiwrapper.py
--- python-jsonrpc-r19/jsonrpc/_tests/test_cgiwrapper.py	2007-04-23 12:40:50.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/_tests/test_cgiwrapper.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,55 +0,0 @@
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-import unittest
-import jsonrpc
-from types import *
-
-class Service(object):
-    @jsonrpc.ServiceMethod
-    def echo(self, arg):
-        return arg
-
-
-class  TestCGIWrapper(unittest.TestCase):
-
-    def setUp(self):
-        pass
-
-    def tearDown(self):
-        pass
-
-    def test_runCGIHandler(self):
-        from StringIO import StringIO
-
-        json=u'{"method":"echo","params":["foobar"], "id":""}'
-        fin=StringIO(json)
-        fout=StringIO()
-        
-        env = {"CONTENT_LENGTH":len(json)}
-
-        jsonrpc.handleCGI(service=Service(), fin=fin, fout=fout, env=env)
-
-        data = StringIO(fout.getvalue())
-        data.readline()
-        data.readline()
-        data = data.read()
-        self.assertEquals(jsonrpc.loads(data), {"result":"foobar", "error":None, "id":""})
-
diff -urN python-jsonrpc-r19/jsonrpc/_tests/test_json.py python-jsonrpc-r19.modified//jsonrpc/_tests/test_json.py
--- python-jsonrpc-r19/jsonrpc/_tests/test_json.py	2007-07-25 12:24:19.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/_tests/test_json.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,184 +0,0 @@
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-
-import unittest
-import jsonrpc
-from types import *
-
-
-
-class  TestDumps(unittest.TestCase):
-    def setUp(self):
-        pass
-
-    def tearDown(self):
-        pass
-
-    
-    def assertJSON(self, json, expectedJSON):
-        self.assert_(type(json) is UnicodeType)
-        self.assertEqual(json, expectedJSON)
-           
-    def test_Number(self):
-        json = jsonrpc.dumps(1)
-        self.assertJSON(json, u'1')
-        
-        json = jsonrpc.dumps(0xffffffffffffffffffffffff)
-        self.assertJSON(json, u'79228162514264337593543950335')
-
-    def test_None(self):
-        json = jsonrpc.dumps(None)
-        self.assertJSON(json, u'null')
-        
-    def test_Boolean(self):
-        json = jsonrpc.dumps(False)
-        self.assertJSON(json, u'false')
-        json = jsonrpc.dumps(True)
-        self.assertJSON(json, u'true')
-
-    def test_Float(self):
-        json = jsonrpc.dumps(1.2345)
-        self.assertJSON(json, u'1.2345')
-
-        json =jsonrpc.dumps(1.2345e67)
-        self.assertJSON(json, u'1.2345e+67')
-
-        json =jsonrpc.dumps(1.2345e-67)
-        self.assertJSON(json, u'1.2345e-67')
-
-    def test_String(self):
-        json = jsonrpc.dumps('foobar')
-        self.assertJSON(json, u'"foobar"')
-
-        json = jsonrpc.dumps('foobar')
-        self.assertJSON(json, u'"foobar"')
-
-    def test_StringEscapedChars(self):
-        json = jsonrpc.dumps('\n \f \t \b \r \\ " /')
-        self.assertJSON(json, u'"\\n \\f \\t \\b \\r \\\\ \\" \\/"')
-
-    def test_StringEscapedUnicodeChars(self):
-        json = jsonrpc.dumps(u'\0 \x19 \x20\u0130')
-        self.assertJSON(json, u'"\\u0000 \\u0019  \u0130"')
-
-    def test_Array(self):
-        json = jsonrpc.dumps([1, 2.3e45, 'foobar'])
-        self.assertJSON(json, u'[1,2.3e+45,"foobar"]')
-
-    def test_Dictionary(self):
-        json = jsonrpc.dumps({'foobar':'spam', 'a':[1,2,3]})
-        self.assertJSON(json, u'{"a":[1,2,3],"foobar":"spam"}')
-
-    def test_FailOther(self):
-        self.failUnlessRaises(jsonrpc.JSONEncodeException, lambda:jsonrpc.dumps(self))
-
-        
-        
-
-class  TestLoads(unittest.TestCase):
-    def setUp(self):
-        pass
-
-    def tearDown(self):
-        pass
-
-
-    def test_String(self):
-
-        json = jsonrpc.dumps("foobar")
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, u"foobar")
-    
-    def test_StringEscapedChars(self):
-        json = '"\\n \\t \\r \\b \\f \\\\ \\/ /"'
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, u'\n \t \r \b \f \\ / /')
-        
-    def test_StringEscapedUnicodeChars(self):
-        json = jsonrpc.dumps(u'\u0000 \u0019')
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, u'\0 \x19')
-        
-    def test_Array(self):
-        json = jsonrpc.dumps(['1', ['2','3']])
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, ['1', ['2','3']])
-
-    def test_Dictionary(self):
-        json = jsonrpc.dumps({'foobar':'spam', 'nested':{'a':'b'}})
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, {'foobar':'spam', 'nested':{'a':'b'}})
-
-
-    def test_Int(self):
-        json = jsonrpc.dumps(1234)
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, 1234)
-
-
-    def test_NegativeInt(self):
-        json = jsonrpc.dumps(-1234)
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, -1234)
-
-    def test_NumberAtEndOfArray(self):
-        json = jsonrpc.dumps([-1234])
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, [-1234])
-
-    def test_StrAtEndOfArray(self):
-        json = jsonrpc.dumps(['foobar'])
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, ['foobar'])
-            
-    def test_Float(self):
-        json = jsonrpc.dumps(1234.567)
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, 1234.567)
-
-    def test_Exponential(self):
-        json = jsonrpc.dumps(1234.567e89)
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, 1234.567e89)
-
-    def test_True(self):
-        json = jsonrpc.dumps(True)
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, True)
-
-    def test_False(self):
-        json = jsonrpc.dumps(False)
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, False)
-
-    def test_None(self):
-        json = jsonrpc.dumps(None)
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, None)
-
-    def test_NestedDictAllTypes(self):
-        json = jsonrpc.dumps({'s':'foobar', 'int':1234, 'float':1234.567, 'exp':1234.56e78,
-                                            'negInt':-1234, 'None':None,'True':True, 'False':False,
-                                            'list':[1,2,4,{}], 'dict':{'a':'b'}})
-        obj = jsonrpc.loads(json)
-        self.assertEquals(obj, {'s':'foobar', 'int':1234, 'float':1234.567, 'exp':1234.56e78,
-                                            'negInt':-1234, 'None':None,'True':True, 'False':False,
-                                            'list':[1,2,4,{}], 'dict':{'a':'b'}})
diff -urN python-jsonrpc-r19/jsonrpc/_tests/test_modpywrapper.py python-jsonrpc-r19.modified//jsonrpc/_tests/test_modpywrapper.py
--- python-jsonrpc-r19/jsonrpc/_tests/test_modpywrapper.py	2007-04-29 09:22:41.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/_tests/test_modpywrapper.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,98 +0,0 @@
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-import unittest
-import jsonrpc
-from types import *
-
-class Service(object):
-    @jsonrpc.ServiceMethod
-    def echo(self, arg):
-        return arg
-
-
-class ApacheRequestMockup(object):
-
-    def __init__(self, filename, fin, fout):
-        self.fin=fin
-        self.fout = fout
-        self.filename = filename
-        
-    def write(self,data):
-        self.fout.write(data)
-
-    def flush(self):
-        pass
-    
-    def read(self):
-        return self.fin.read()
-
-class ModPyMockup(object):
-    def __init__(self):
-        self.apache=ApacheModuleMockup()
-
-class ApacheModuleMockup(object):
-    def __getattr__(self, name):
-        return name
-    
-    def import_module(self, moduleName, log=1):
-        return Service()
-
-
-    
-class  TestModPyWrapper(unittest.TestCase):
-
-    def setUp(self):
-        import sys
-        sys.modules['mod_python']  =ModPyMockup()
-        
-    def tearDown(self):
-        pass
-
-    def test_runHandler(self):
-        from StringIO import StringIO
-       
-        json=u'{"method":"echo","params":["foobar"], "id":""}'
-        fin=StringIO(json)
-        fout=StringIO()
-        req = ApacheRequestMockup(__file__ , fin, fout)
-
-        jsonrpc.handler(req)
-
-        data = fout.getvalue()
-
-        self.assertEquals(jsonrpc.loads(data), {"result":"foobar", "error":None, "id":""})
-
-    def test_ServiceImplementationNotFound(self):
-        from StringIO import StringIO
-       
-        json=u'{"method":"echo","params":["foobar"], "id":""}'
-        fin=StringIO(json)
-        fout=StringIO()
-        req = ApacheRequestMockup("foobar" , fin, fout)
-
-        rslt = jsonrpc.handler(req)
-        self.assertEquals(rslt, "OK")
-        data = fout.getvalue()
-
-        self.assertEquals(jsonrpc.loads(data), {u'id': '', u'result': None, u'error': {u'message': '', u'name': u'ServiceImplementaionNotFound'}} )
-
-        
-
diff -urN python-jsonrpc-r19/jsonrpc/_tests/test_proxy.py python-jsonrpc-r19.modified//jsonrpc/_tests/test_proxy.py
--- python-jsonrpc-r19/jsonrpc/_tests/test_proxy.py	2007-04-29 09:55:19.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/_tests/test_proxy.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,61 +0,0 @@
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-
-import unittest
-import jsonrpc
-
-import urllib
-
-from StringIO import StringIO
-
-class  TestProxy(unittest.TestCase):
-
-    def urlopen(self, url, data):
-        self.postdata = data
-        return StringIO(self.respdata) 
-    
-    def setUp(self):
-        self.postdata=""
-        self.urllib_openurl = urllib.urlopen
-        urllib.urlopen = self.urlopen
-        
-    def tearDown(self):
-        urllib.urlopen = self.urllib_openurl
-
-    def test_ProvidesProxyMethod(self):
-        s = jsonrpc.ServiceProxy("http://localhost/")
-        self.assert_(callable(s.echo))
-
-    def test_MethodCallCallsService(self):
-        
-        s = jsonrpc.ServiceProxy("http://localhost/")
-
-        self.respdata='{"result":"foobar","error":null,"id":""}'
-        echo = s.echo("foobar")
-        self.assertEquals(self.postdata, jsonrpc.dumps({"method":"echo", 'params':['foobar'], 'id':'jsonrpc'}))
-        self.assertEquals(echo, 'foobar')
-
-        self.respdata='{"result":null,"error":"MethodNotFound","id":""}'
-        try:
-            s.echo("foobar")
-        except jsonrpc.JSONRPCException,e:
-            self.assertEquals(e.error, "MethodNotFound")
-            
\ No newline at end of file
diff -urN python-jsonrpc-r19/jsonrpc/_tests/test_serviceHandler.py python-jsonrpc-r19.modified//jsonrpc/_tests/test_serviceHandler.py
--- python-jsonrpc-r19/jsonrpc/_tests/test_serviceHandler.py	2007-04-22 11:50:20.000000000 -0700
+++ python-jsonrpc-r19.modified//jsonrpc/_tests/test_serviceHandler.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,153 +0,0 @@
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-
-
-
-
-import unittest
-import jsonrpc
-from types import *
-
-
-class Service(object):
-    @jsonrpc.ServiceMethod
-    def echo(self, arg):
-        return arg
-
-    def not_a_serviceMethod(self):
-        pass
-    
-    @jsonrpc.ServiceMethod
-    def raiseError(self):
-        raise Exception("foobar")
-
-class Handler(jsonrpc.ServiceHandler):
-    def __init__(self, service):
-        self.service=service
-
-    def translateRequest(self, data):
-        self._requestTranslated=True
-        return jsonrpc.ServiceHandler.translateRequest(self, data)
-    
-    def findServiceEndpoint(self, name):
-        self._foundServiceEndpoint=True
-        return jsonrpc.ServiceHandler.findServiceEndpoint(self, name)
-
-    def invokeServiceEndpoint(self, meth, params):
-        self._invokedEndpoint=True
-        return jsonrpc.ServiceHandler.invokeServiceEndpoint(self, meth, params)
-
-    def translateResult(self, result, error, id_):
-        self._resultTranslated=True
-        return jsonrpc.ServiceHandler.translateResult(self, result, error,  id_)
-
-
-
-class  TestServiceHandler(unittest.TestCase):
-
-    def setUp(self):
-        self.service = Service()
-        
-    def tearDown(self):
-        pass
-
-    def test_RequestProcessing(self):
-        handler = Handler(self.service)
-        json=jsonrpc.dumps({"method":"echo", 'params':['foobar'], 'id':''})
-        
-        result  = handler.handleRequest(json)
-        self.assert_(handler._requestTranslated)
-        self.assert_(handler._foundServiceEndpoint)
-        self.assert_(handler._invokedEndpoint)
-        self.assert_(handler._resultTranslated)
-
-    def test_translateRequest(self):
-        handler = Handler(self.service)
-        json=jsonrpc.dumps({"method":"echo", 'params':['foobar'], 'id':''})
-        req = handler.translateRequest(json)
-        self.assertEquals(req['method'], "echo")
-        self.assertEquals(req['params'],['foobar'])
-        self.assertEquals(req['id'],'')
-
-    def test_findServiceEndpoint(self):
-        handler = Handler(self.service)
-        self.assertRaises(jsonrpc.ServiceMethodNotFound, handler.findServiceEndpoint, "notfound")
-        self.assertRaises(jsonrpc.ServiceMethodNotFound, handler.findServiceEndpoint, "not_a_serviceMethod")
-        meth = handler.findServiceEndpoint("echo")
-        self.assertEquals(self.service.echo, meth)
-
-    def test_invokeEndpoint(self):
-        handler = Handler(self.service)
-        meth = handler.findServiceEndpoint("echo")
-        rslt = handler.invokeServiceEndpoint(meth, ['spam'])
-        self.assertEquals(rslt, 'spam')
-
-    def test_translateResults(self):
-        handler=Handler(self.service)
-        data=handler.translateResult("foobar", None,  "spam")
-        self.assertEquals(jsonrpc.loads(data), {"result":"foobar","id":"spam","error":None})
-
-    def test_translateError(self):
-        handler=Handler(self.service)
-        exc = Exception()
-        data=handler.translateResult(None, exc, "id")
-        self.assertEquals(jsonrpc.loads(data), {"result":None,"id":"id","error":{"name":"Exception", "message":""}})
-
-    def test_translateUnencodableResults(self):
-        handler=Handler(self.service)
-        data=handler.translateResult(self, None, "spam")
-        self.assertEquals(jsonrpc.loads(data), {"result":None,"id":"spam","error":{"name":"JSONEncodeException", "message":"Result Object Not Serializable"}})
-
-    def test_handleRequestEcho(self):
-        handler=Handler(self.service)
-        json=jsonrpc.dumps({"method":"echo", 'params':['foobar'], 'id':''})
-        result = handler.handleRequest(json)
-        self.assertEquals(jsonrpc.loads(result), jsonrpc.loads('{"result":"foobar", "error":null, "id":""}'))
-
-    def test_handleRequestMethodNotFound(self):
-        handler=Handler(self.service)
-        json=jsonrpc.dumps({"method":"not_found", 'params':['foobar'], 'id':''})
-        result = handler.handleRequest(json)
-        self.assertEquals(jsonrpc.loads(result), {"result":None, "error":{"name":"ServiceMethodNotFound", "message":""}, "id":""})
-
-    def test_handleRequestMethodNotAllowed(self):
-        handler=Handler(self.service)
-        json=jsonrpc.dumps({"method":"not_a_ServiceMethod", 'params':['foobar'], 'id':''})
-        result = handler.handleRequest(json)
-        self.assertEquals(jsonrpc.loads(result), {"result":None, "error":{"name":"ServiceMethodNotFound", "message":""}, "id":""})
-
-    def test_handleRequestMethodRaiseError(self):
-        handler=Handler(self.service)
-        json=jsonrpc.dumps({"method":"raiseError", 'params':[], 'id':''})
-        result = handler.handleRequest(json)
-        self.assertEquals(jsonrpc.loads(result), {"result":None, "error":{"name":"Exception", "message":"foobar"}, "id":""})
-
-    def test_handleBadRequestData(self):
-        handler=Handler(self.service)
-        json = "This is not a JSON-RPC request"
-        result = handler.handleRequest(json)
-        self.assertEquals(jsonrpc.loads(result), {"result":None, "error":{"name":"ServiceRequestNotTranslatable", "message":json}, "id":""})
-
-    def test_handleBadRequestObject(self):
-        handler=Handler(self.service)
-        json = "{}"
-        result = handler.handleRequest(json)
-        self.assertEquals(jsonrpc.loads(result), {"result":None, "error":{"name":"BadServiceRequest", "message":json}, "id":""})
diff -urN python-jsonrpc-r19/run-tests.py python-jsonrpc-r19.modified//run-tests.py
--- python-jsonrpc-r19/run-tests.py	2007-04-22 11:50:20.000000000 -0700
+++ python-jsonrpc-r19.modified//run-tests.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,41 +0,0 @@
-#!/usr/bin/env python
-
-"""
-  Copyright (c) 2007 Jan-Klaas Kollhof
-
-  This file is part of jsonrpc.
-
-  jsonrpc is free software; you can redistribute it and/or modify
-  it under the terms of the GNU Lesser General Public License as published by
-  the Free Software Foundation; either version 2.1 of the License, or
-  (at your option) any later version.
-
-  This software is distributed in the hope that it will be useful,
-  but WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-  GNU Lesser General Public License for more details.
-
-  You should have received a copy of the GNU Lesser General Public License
-  along with this software; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-"""
-
-
-import unittest
-import os
-
-
-from jsonrpc import _tests
-
-if __name__ == "__main__":
-
-    testPath = os.path.split(_tests.__file__)[0]
-    testModules = []
-    for fileName in os.listdir(testPath):
-        if fileName[-3:] == '.py' and fileName != '__init__.py':
-            testModules.append('jsonrpc._tests.%s' % fileName[:-3])
-
-    suite = unittest.TestLoader().loadTestsFromNames(testModules)
-
-    unittest.TextTestRunner(verbosity=5).run(suite)
-    
diff -urN python-jsonrpc-r19/setup.py python-jsonrpc-r19.modified//setup.py
--- python-jsonrpc-r19/setup.py	2007-04-23 12:40:50.000000000 -0700
+++ python-jsonrpc-r19.modified//setup.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,14 +0,0 @@
-#!/usr/bin/env python
-
-from distutils.core import setup
-
-setup(name = "jsonrpc",
-    version = "0.01",
-    description = "A json-rpc package which implements JSON-RPC over HTTP.",
-    keywords = "JSON RPC",
-    author = "Jan-Klaas Kollhof",
-    url = "http://json-rpc.org/wiki/python-json-rpc",
-    license = "LGPL",
-    long_description = """""",
-    packages = ['jsonrpc']
-)
\ No newline at end of file
