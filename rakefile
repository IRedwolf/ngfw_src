# -*-ruby-*-

# This rakefile is compatible with both 0.8 and 10

verbose(false) #disable printing of rake mkdir messages

## generic framework
require "./buildtools/buildtools.rb"

## default tasks
task :default => :devel
task :all => :devel

## clean tasks
task :download_clean do
  Kernel.system( "make --no-print-directory -C downloads distclean" )
end

## clean up any running UVM
task :uvm_clean do
  # if running, kill it
  Kernel.system("if [ -f /var/run/uvm.pid ] && [ -f /proc/`cat /var/run/uvm.pid`/cmdline ] && grep -q #{SRC_HOME} /proc/`cat /var/run/uvm.pid`/cmdline ; then #{SRC_HOME}/dist/etc/init.d/untangle-vm stop ; fi")
  # change symlinks back to original
  Kernel.system('if [ -L /usr/share/untangle/bin ] && [ -d /usr/share/untangle/bin.backup ] ; then sudo rm -f /usr/share/untangle/bin && sudo mv /usr/share/untangle/bin.backup /usr/share/untangle/bin ; fi')
  # we no longer relink settings, but lets keep this here until 13.0 so developers don't have issues
  Kernel.system('if [ -L /usr/share/untangle/settings ] && [ -d /usr/share/untangle/settings.backup ] ; then sudo rm -f /usr/share/untangle/settings && sudo mv /usr/share/untangle/settings.backup /usr/share/untangle/settings ; fi')
  # remove apache file
  if File.exist?("/etc/apache2/uvm-dev.conf")
    info "[rm -rf  ] /etc/apache2/uvm-dev.conf"
    FileUtils.rm_rf("/etc/apache2/uvm-dev.conf") if File.exist?("/etc/apache2/uvm-dev.conf")
  end
end

task :kindaclean do
  info "[rm -rf  ] #{BuildEnv::SRC.devel}"
  FileUtils.rm_rf(BuildEnv::SRC.devel) if File.exist?(BuildEnv::SRC.devel)
  info "[rm -rf  ] #{BuildEnv::SRC.staging}"
  FileUtils.rm_rf(BuildEnv::SRC.staging) if File.exist?(BuildEnv::SRC.staging)
  info "[rm -rf  ] debian/dirs"
  FileUtils.rm_rf(FileList['debian/*'].select { |f| File.directory?(f) })
  if File.exist?("graphviz.dot")
    info "[rm -rf  ] graphviz.dot"
    FileUtils.rm_rf("graphviz.dot")
  end
  ## Clear the stamp hashes
  Rake::StampHash.instance.clear
end

task :clean => [:uvm_clean, :download_clean, :kindaclean]

## download task; it is needed by both arch-dep and arch-indep,
## because Jars.findJars sets up the base classpath used everywhere
task :download do
  Kernel.system("make --no-print-directory -C downloads")
  raise unless $?.success?
  Jars.findJars
end

## arch-dep tasks
task :core => :download do
  require "./buildtools/untangle-core.rb"
end
task :builduvmcore => :core do
  Rake::Task[:libuvmcore_so].invoke
end
task :installuvmcore => :builduvmcore do
  Rake::Task[:dest_uvmcore_so].invoke
end

## arch-indep tasks
task :targets => :download do
  # Require all arch-indep sub packages; done manually because order
  # matters.
  require "#{SRC_HOME}/uvm/package.rb"
  require "#{SRC_HOME}/reports/package.rb"
  require "#{SRC_HOME}/ftp-casing/package.rb"
  require "#{SRC_HOME}/http-casing/package.rb"
  require "#{SRC_HOME}/smtp-casing/package.rb"
  require "#{SRC_HOME}/router/package.rb"
  require "#{SRC_HOME}/shield/package.rb"
  require "#{SRC_HOME}/firewall/package.rb"
  require "#{SRC_HOME}/openvpn/package.rb"
  require "#{SRC_HOME}/application-control-lite/package.rb"
  require "#{SRC_HOME}/intrusion-prevention/package.rb"
  require "#{SRC_HOME}/spam-blocker-base/package.rb"
  require "#{SRC_HOME}/virus-blocker-base/package.rb"
  require "#{SRC_HOME}/clam-base/package.rb"
  require "#{SRC_HOME}/web-filter-base/package.rb"
  require "#{SRC_HOME}/web-filter/package.rb"
  require "#{SRC_HOME}/phish-blocker/package.rb"
  require "#{SRC_HOME}/spam-blocker-lite/package.rb"
  require "#{SRC_HOME}/web-monitor/package.rb"
  require "#{SRC_HOME}/ad-blocker/package.rb"
  require "#{SRC_HOME}/virus-blocker-lite/package.rb"
  require "#{SRC_HOME}/captive-portal/package.rb"
  require "#{SRC_HOME}/application-control/package.rb"
  require "#{SRC_HOME}/bandwidth-control/package.rb"
  require "#{SRC_HOME}/branding-manager/package.rb"
  require "#{SRC_HOME}/configuration-backup/package.rb"
  require "#{SRC_HOME}/directory-connector/package.rb"
  require "#{SRC_HOME}/ipsec-vpn/package.rb"
  require "#{SRC_HOME}/live-support/package.rb"
  require "#{SRC_HOME}/policy-manager/package.rb"
  require "#{SRC_HOME}/spam-blocker/package.rb"
  require "#{SRC_HOME}/ssl-inspector/package.rb"
  require "#{SRC_HOME}/virus-blocker/package.rb"
  require "#{SRC_HOME}/wan-balancer/package.rb"
  require "#{SRC_HOME}/wan-failover/package.rb"
  require "#{SRC_HOME}/web-cache/package.rb"
  require "#{SRC_HOME}/license/package.rb"
  if File.exists?("#{SRC_HOME}/plugins/package.rb")
    require "#{SRC_HOME}/plugins/package.rb"
  end
end

task :build => [:builduvmcore, :targets] do
  Rake::Task[BuildEnv::SRC['untangle-vm']].invoke
  Rake::Task[BuildEnv::SRC['app']].invoke
end

task :hier => :targets do
  Rake::Task[BuildEnv::SRC.hierTarget].invoke
end

task :devel => [:build, :hier, :installuvmcore] do
  Rake::Task[BuildEnv::SRC['install']].invoke
  Rake::Task[BuildEnv::SRC.installTarget].invoke
end

task :i18n => [:builduvmcore, :targets ] do
  ## Generate and update po files
#  raise "generate failed" unless Kernel.system("#{BuildEnv::SRC.i18ntools}/generate.py")
#  raise "translate failed" unless Kernel.system("#{BuildEnv::SRC.i18ntools}/translate.py", "--languages=xx")
  Rake::Task[BuildEnv::SRC.i18nTarget].invoke
end

task :debian_init_files do
  FileList["./debian/**/etc/init.d/*"].each do |f|
    FileUtils.cp(f, "./debian/#{File.basename(f)}.init")
  end
end

task :install => [:devel, :i18n, :debian_init_files]

task :javadoc do
  dirs = 'uvm/api'
  cpath = FileList['staging/*'].map { |e| "#{e}/" }.join(':') + ":" + FileList['downloads/output/**/*jar'].join(':')
  css = "./buildtools/javadoc.css"

  Kernel.exec('javadoc', '-splitindex','-docencoding','UTF-8','-use','-docfilessubdirs', '-stylesheetfile', css, '-sourcepath', dirs, '-classpath', cpath,
              '-d', "#{BuildEnv::SRC.staging}/javadoc",
              '-subpackages', 'com.untangle', '-J-Xmx512m')
end
