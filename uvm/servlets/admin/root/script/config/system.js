Ext.define('Ung.config.system.System', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.config.system',
    requires: [
        'Ung.config.system.SystemController',
        // 'Ung.overrides.form.CheckboxGroup'
    ],
    viewModel: {
        data: {
            time: null
        }
    },
    controller: 'config.system',
    dockedItems: [{
        xtype: 'toolbar',
        weight: -10,
        border: false,
        items: [{
            text: 'Back',
            iconCls: 'fa fa-arrow-circle-left fa-lg',
            hrefTarget: '_self',
            href: '#config'
        }, '-', {
            xtype: 'tbtext',
            html: '<strong>' + 'System'.t() + '</strong>'
        }],
    }, {
        xtype: 'toolbar',
        dock: 'bottom',
        border: false,
        items: ['->', {
            text: 'Apply Changes'.t(),
            scale: 'large',
            iconCls: 'fa fa-floppy-o fa-lg',
            handler: 'saveSettings'
        }]
    }],
    items: [{
        xtype: 'config.system.regional'
    }, {
        xtype: 'config.system.support'
    }, {
        xtype: 'config.system.backup'
    }, {
        xtype: 'config.system.restore'
    }, {
        xtype: 'config.system.protocols'
    }, {
        xtype: 'config.system.shield'
    }]
});
Ext.define('Ung.config.system.SystemController', {    extend: 'Ext.app.ViewController',    alias: 'controller.config.system',    control: {        '#regional': {            afterrender: 'loadRegional'        }    },    loadRegional: function (view) {        this.getTime();        var vm = view.getViewModel(),            timeZones = [];        eval(rpc.systemManager.getTimeZones()).forEach(function (tz) {            timeZones.push({name: '(' + tz[1] + ') ' + tz[0], value: tz[0]})        });        vm.set('timeZones', timeZones);    },    // Regional    getTime: function () {        var vm = this.getView().down('#regional').getViewModel();        rpc.systemManager.getDate(function (result, ex) {            if (ex) { console.error(ex); Ung.Util.exceptionToast(ex); return; }            vm.set('time', result);        });    },    // getTimeZone: function () {    //     var tz = rpc.systemManager.getTimeZone();    //     if (tz && typeof tz !== 'string' ) {    //         tz = tz.ID;    //     }    //     // this.rpc.timeZone = tz;    // },    syncTime: function () {        var me = this;        Ext.MessageBox.confirm(            'Force Time Synchronization'.t(),            'Forced time synchronization can cause problems if the current date is far in the future.'.t() + '<br/>' +            'A reboot is suggested after time sychronization.'.t() + '<br/><br/>' +            'Continue?'.t(),            function(btn) {                if (btn === 'yes') {                    Ext.MessageBox.wait('Syncing time with the internet...'.t(), 'Please wait'.t());                    rpc.UvmContext.forceTimeSync(function (result, ex) {                        Ext.MessageBox.hide();                        if (ex) { console.error(ex); Ung.Util.exceptionToast(ex); return; }                        if (result !== 0) {                            Ung.Util.exceptionToast('Time synchronization failed. Return code:'.t() + ' ' + result);                        } else {                            me.timeUpdate();                            Ung.Util.successToast('Time was synchronized!');                        }                    });                }            });    },    saveSettings: function () {        var v = this.getView();        v.setLoading('Saving...');        Ext.Deferred.sequence([            // this.setLanguage,            this.setSystem,            this.setTimezone,            this.setDate        ], this).then(function () {            v.setLoading(false);            Ung.Util.successToast('System settings saved!');        }, function (ex) {            v.setLoading(false);            console.error(ex);            Ung.Util.exceptionToast(ex);        });    },    setLanguage: function () {        console.log('Saving Language...');        var deferred = new Ext.Deferred(),            vm = this.getView().down('#regional').getViewModel();        if (vm.get('languageSettings.regionalFormats') === 'default') {            // reset overrides            vm.set('languageSettings.overrideDateFmt', '');            vm.set('languageSettings.overrideDecimalSep', '');            vm.set('languageSettings.overrideThousandSep', '');            vm.set('languageSettings.overrideTimestampFmt', '');        }        rpc.languageManager.setLanguageSettings(function (result, ex) { if (ex) { deferred.reject(ex); } deferred.resolve(); }, vm.get('languageSettings'));        return deferred.promise;    },    setSystem: function () {        console.log('Saving System...');        var deferred = new Ext.Deferred(),            vm = this.getView().down('#regional').getViewModel();        rpc.systemManager.setSettings(function (result, ex) { if (ex) { deferred.reject(ex); } deferred.resolve(); }, vm.get('systemSettings'));        return deferred.promise;    },    setTimezone: function () {        console.log('Saving Timezone...');        var deferred = new Ext.Deferred(),            vm = this.getView().down('#regional').getViewModel();        rpc.systemManager.setTimeZone(function (result, ex) { if (ex) { deferred.reject(ex); } deferred.resolve(); }, vm.get('tz'));        return deferred.promise;    },    setDate: function () {        console.log('Saving Date...');        var deferred = new Ext.Deferred(),            v = this.getView().down('#regional');        rpc.systemManager.setDate(function (result, ex) { if (ex) { deferred.reject(ex); } deferred.resolve(); }, new Date(v.down('datefield').getValue()).getTime());        return deferred.promise;    }    // setTimezone: function () {    //     console.log('Saving Timezone...');    //     var deferred = new Ext.Deferred(),    //         vm = this.getView().down('#regional').getViewModel();    //     rpc.systemManager.setTimeZone(function (result, ex) { if (ex) { deferred.reject(ex); } deferred.resolve(); }, vm.get('tz'));    //     return deferred.promise;    // }});
Ext.define('Ung.config.system.Backup', {    extend: 'Ext.panel.Panel',    alias: 'widget.config.system.backup',    viewModel: true,    title: 'Backup'.t()});
Ext.define('Ung.config.system.Protocols', {    extend: 'Ext.panel.Panel',    alias: 'widget.config.system.protocols',    viewModel: true,    title: 'Protocols'.t()});
Ext.define('Ung.config.system.Regional', {    extend: 'Ext.panel.Panel',    alias: 'widget.config.system.regional',    itemId: 'regional',    viewModel: {        data: {            isExpertMode: rpc.isExpertMode,            time: null,            languageSettings: rpc.languageManager.getLanguageSettings(),            languagesList: rpc.languageManager.getLanguagesList(),            systemSettings: rpc.systemManager.getSettings(),            tz: rpc.systemManager.getTimeZone(),            timeZones: null        },        formulas: {            timeSource: function (get) {                return get('systemSettings.timeSource') === 'manual' ? 'Time was set manually'.t() : 'Time is automatically synchronized via NTP'.t();            },            manualDate: function (get) {                // to fix because rpc.systemManager.getDate() returns an invalid date string                return get('time') ? new Date(get('time').replace('EET', '(EET)')) : new Date();            },            // used for setting the date/time            manualDateFormat: function (get) { return get('languageSettings.overrideTimestampFmt') || 'timestamp_fmt'.t(); },            dateFormat: {                get: function (get) {                    var fmt = get('languageSettings.overrideDateFmt');                    return fmt.length === 0 ? 'Y-m-d' : fmt;                },                set: function (value) {                    var fmt = value + ' ' + this.get('timeFormat');                    this.set('languageSettings.overrideDateFmt', value === 'Y-m-d' ? '' : value);                    this.set('languageSettings.overrideTimestampFmt', fmt === 'Y-m-d h:i:s a' ? '' : fmt);                }            },            timeFormat: {                get: function (get) {                    var tsFmt = get('languageSettings.overrideTimestampFmt');                    return tsFmt.length > 0 ? tsFmt.substring(6) : 'h:i:s a';                },                set: function (value) {                    var dateFmt = this.get('languageSettings.overrideDateFmt'),                        fmt = (dateFmt.length === 0 ? 'Y-m-d' : dateFmt) + ' ' + value;                    this.set('languageSettings.overrideTimestampFmt', fmt === 'Y-m-d h:i:s a' ? '' : fmt);                }            }            // decimalSep: function (get) { return get('languageSettings.overrideDecimalSep') || 'decimal_sep'.t(); },            // thousandSep: function (get) { return get('languageSettings.overrideThousandSep') || 'thousand_sep'.t(); },            // dateFmt: function (get) { return get('languageSettings.overrideDateFmt') || 'date_fmt'.t(); },            // timestampFmt: function (get) { return get('languageSettings.overrideTimestampFmt') || 'timestamp_fmt'.t(); }        },        stores: {            timeZone: {                fields: ['name', 'value'],                data: '{timeZones}'            },            languages: {                fields: ['code', 'name', 'statistics', {                    name: 'cc',                    calculate: function (r) {                        return r.code ? r.code.split('-')[1] : r.code;                    }                }],                data: '{languagesList.list}'            }        }    },    title: 'Regional'.t(),    bodyPadding: 10,    defaults: {        xtype: 'fieldset',        padding: 10    },    items: [{        title: 'Current Time'.t(),        items: [{            xtype: 'component',            bind: '{timeSource}'        }, {            xtype: 'component',            margin: '10 0 0 0',            bind: '<i class="fa fa-clock-o"></i> <strong>{time}</strong>'        }]    }, {        title: 'Force Sync Time'.t(),        hidden: true,        bind: {            hidden: '{isExpertMode || systemSettings.timeSource === "manual"}'        },        items: [{            xtype: 'component',            bind: 'Click to force instant time synchronization.'.t()        }, {            xtype: 'button',            margin: '10 0 0 0',            text: 'Synchronize Time'.t(),            iconCls: 'fa fa-refresh',            handler: 'syncTime'        }]    }, {        title: 'Time Settings'.t(),        items: [{            xtype: 'radiogroup',            columns: 1,            vertical: true,            simpleValue: true,            bind: '{systemSettings.timeSource}',            items: [{                boxLabel: '<strong>' + 'Synchronize time automatically via NTP'.t() + '</strong>',                inputValue: 'ntp'            }, {                xtype: 'fieldset',                margin: '5 25',                border: false,                disabled: true,                layout: {                    type: 'hbox'                },                bind: {                    disabled: '{systemSettings.timeSource !== "ntp"}'                },                items: [{                    xtype: 'displayfield',                    value: 'Click to force instant time synchronization.'.t()                }, {                    xtype: 'button',                    margin: '0 0 0 10',                    text: 'Synchronize Time'.t(),                    iconCls: 'fa fa-refresh',                    handler: 'syncTime'                }]            }, {                boxLabel: '<strong>' + 'Set system clock manually'.t() + '</strong>',                inputValue: 'manual'            }, {                xtype: 'datefield',                width: 200,                margin: '5 25',                disabled: true,                value: new Date(),                bind: {                    value: '{manualDate}',                    format: '{manualDateFormat}',                    disabled: '{systemSettings.timeSource !== "manual"}'                }            }]        }]    }, {        title: 'Timezone'.t(),        items: [{            xtype: 'combo',            width: 350,            bind: {                store: '{timeZone}',                value: '{tz.ID}'            },            displayField: 'name',            valueField: 'value',            editable: false,            queryMode: 'local'        }]    }, {        title: 'Language'.t(),        items: [{            xtype: 'combo',            width: 350,            bind: {                store: '{languages}',                value: '{languageSettings.language}'            },            displayField: 'name',            valueField: 'cc',            editable: false,            queryMode: 'local',            listConfig:{                getInnerTpl: function() {                    return '<div data-qtip="{statistics}">{name}</div>';                }            }        }, {            xtype: 'fieldset',            title: 'Regional Formats'.t(),            border: 0,            margin: 10,            items: [{                xtype: 'radiogroup',                columns: 1,                vertical: true,                simpleValue: true,                bind: '{languageSettings.regionalFormats}',                items: [{                    boxLabel: 'Use defaults'.t(),                    inputValue: 'default'                }, {                    boxLabel: 'Override'.t(),                    inputValue: 'override'                }]            }, {                xtype: 'fieldset',                disabled: true,                border: false,                bind: {                    disabled: '{languageSettings.regionalFormats === "default"}'                },                defaults: {                    xtype: 'combo',                    labelAlign: 'right',                    labelWidth: 150                },                items: [{                    fieldLabel: 'Decimal Separator'.t(),                    bind: '{languageSettings.overrideDecimalSep}',                    queryMode: 'local',                    editable: false,                    store: [                        ['', '. (DOT)'], // DOT is by default so value is set as ''                        [',', ', (COMMA)'],                        [' ', '&nbsp; (SPACE)'],                        ["'", "' (APOSTROPHE)"],                        ['&middot;', "&middot; (MIDDLE DOT)"],                        ['&#729;', "&#729; (DOT ABOVE)"]                    ]                }, {                    fieldLabel: 'Thousand Separator'.t(),                    bind: '{languageSettings.overrideThousandSep}',                    queryMode: 'local',                    editable: false,                    store: [                        ['.', '. (DOT)'],                        ['', ', (COMMA)'], // COMMA is by default so value is set as ''                        [' ', '&nbsp; (SPACE)'],                        ["'", "' (APOSTROPHE)"],                        ['&middot;', "&middot; (MIDDLE DOT)"],                        ['&#729;', "&#729; (DOT ABOVE)"]                    ],                }, {                    fieldLabel: 'Date Format'.t(),                    width: 400,                    bind: '{dateFormat}',                    // bind: '{dateFormat}',                    queryMode: 'local',                    editable: false,                    store: [                        ['Y-m-d', 'Y-m-d (e.g. 2017-05-23) - default'], // 'Y-m-d' is by default                        ['m-d-Y', 'm-d-Y (e.g. 05-23-2017)'],                        ['d-m-Y', 'd-m-Y (e.g. 23-05-2017)'],                        ['Y/m/d', 'Y/m/d (e.g. 2017/05/23)'],                        ['m/d/Y', 'm/d/Y (e.g. 05/23/2017)'],                        ['d/m/Y', 'd/m/Y (e.g. 23/05/2017)'],                        ['d.m.Y', 'd.m.Y (e.g. 23.05.2017)']                    ]                }, {                    fieldLabel: 'Time Format'.t(),                    width: 400,                    bind: '{timeFormat}',                    store: [                        ['h:i:s a', 'h:i:s a (e.g. 06:45:35 PM) - default'],                        ['G:i:s', 'G:i:s (e.g. 18:45:35)']                    ],                    queryMode: 'local',                    editable: false                }, {                    xtype: 'textfield',                    fieldLabel: 'date',                    bind: '{languageSettings.overrideDateFmt}'                }, {                    xtype: 'textfield',                    fieldLabel: 'tstp',                    bind: '{languageSettings.overrideTimestampFmt}'                }]            }]        }]    }]});
Ext.define('Ung.config.system.Restore', {    extend: 'Ext.panel.Panel',    alias: 'widget.config.system.restore',    viewModel: true,    title: 'Restore'.t()});
Ext.define('Ung.config.system.Shield', {    extend: 'Ext.panel.Panel',    alias: 'widget.config.system.shield',    viewModel: true,    title: 'Shield'.t()});
Ext.define('Ung.config.system.Support', {    extend: 'Ext.panel.Panel',    alias: 'widget.config.system.support',    viewModel: true,    title: 'Support'.t()});